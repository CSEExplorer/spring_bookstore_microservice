pipeline {
    agent any

    environment {
        IMAGE_NAME = "account-service"
        REPO_URL = "https://github.com/CSEExplorer/spring_bookstore_microservice.git"
        SSH_HOST = "13.203.222.155"
        SSH_USER = "ubuntu"
        REMOTE_PATH = "/home/ubuntu/account-service"
        JAR_NAME = "account-service-0.0.1-SNAPSHOT.jar"
    }

    stages {
        stage('Clone Repo') {
            steps {
                git branch: 'main', credentialsId: 'github-creds', url: "${REPO_URL}"
            }
        }

        stage('Build with Maven') {
            steps {
                dir('account-service') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Transfer files to EC2') {
            steps {
                sshagent(['ec2-ssh']) {
                    sh """
                        # Create .env file temporarily
                        cat > account-service/.env <<EOF
EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://172.31.0.246:8761/eureka/
EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
EUREKA_INSTANCE_INSTANCE_ID=account-service
EUREKA_INSTANCE_IP_ADDRESS=172.31.14.151
SPRING_DATASOURCE_URL=jdbc:mysql://account-service-db.czyw86ac6bb5.ap-south-1.rds.amazonaws.com/accountDB
SPRING_DATASOURCE_USERNAME=root
SPRING_DATASOURCE_PASSWORD=4ad+6ad+9=0
AWS_ACCESS_KEY=AKIAQUFLQNJSWZ5FHOVB
AWS_SECRET_KEY=E07qlsheCUmfBpYai4tohFfKG3WhO+S5T1toh6GWH
AWS_REGION=ap-south-1
AWS_S3_BUCKET=account-microservice-user-profile-image
EOF

                        # Transfer JAR, .env and Dockerfile
                        scp -o StrictHostKeyChecking=no account-service/.env ${SSH_USER}@${SSH_HOST}:${REMOTE_PATH}/.env
                        scp -o StrictHostKeyChecking=no account-service/target/${JAR_NAME} ${SSH_USER}@${SSH_HOST}:${REMOTE_PATH}/${JAR_NAME}
                        scp -o StrictHostKeyChecking=no account-service/Dockerfile ${SSH_USER}@${SSH_HOST}:${REMOTE_PATH}/Dockerfile
                    """
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                sshagent(['ec2-ssh']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${SSH_USER}@${SSH_HOST} '
                            cd ${REMOTE_PATH}
                            docker rm -f ${IMAGE_NAME} || true
                            docker build -t ${IMAGE_NAME} .
                            docker run -d --name ${IMAGE_NAME} -p 8081:8081 --env-file .env ${IMAGE_NAME}
                        '
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
